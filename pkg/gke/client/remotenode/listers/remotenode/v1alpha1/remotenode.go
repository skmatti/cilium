/*
Copyright 2023 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/cilium/cilium/pkg/gke/apis/remotenode/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RemoteNodeLister helps list RemoteNodes.
// All objects returned here must be treated as read-only.
type RemoteNodeLister interface {
	// List lists all RemoteNodes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RemoteNode, err error)
	// RemoteNodes returns an object that can list and get RemoteNodes.
	RemoteNodes(namespace string) RemoteNodeNamespaceLister
	RemoteNodeListerExpansion
}

// remoteNodeLister implements the RemoteNodeLister interface.
type remoteNodeLister struct {
	indexer cache.Indexer
}

// NewRemoteNodeLister returns a new RemoteNodeLister.
func NewRemoteNodeLister(indexer cache.Indexer) RemoteNodeLister {
	return &remoteNodeLister{indexer: indexer}
}

// List lists all RemoteNodes in the indexer.
func (s *remoteNodeLister) List(selector labels.Selector) (ret []*v1alpha1.RemoteNode, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RemoteNode))
	})
	return ret, err
}

// RemoteNodes returns an object that can list and get RemoteNodes.
func (s *remoteNodeLister) RemoteNodes(namespace string) RemoteNodeNamespaceLister {
	return remoteNodeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RemoteNodeNamespaceLister helps list and get RemoteNodes.
// All objects returned here must be treated as read-only.
type RemoteNodeNamespaceLister interface {
	// List lists all RemoteNodes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RemoteNode, err error)
	// Get retrieves the RemoteNode from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RemoteNode, error)
	RemoteNodeNamespaceListerExpansion
}

// remoteNodeNamespaceLister implements the RemoteNodeNamespaceLister
// interface.
type remoteNodeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RemoteNodes in the indexer for a given namespace.
func (s remoteNodeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RemoteNode, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RemoteNode))
	})
	return ret, err
}

// Get retrieves the RemoteNode from the indexer for a given namespace and name.
func (s remoteNodeNamespaceLister) Get(name string) (*v1alpha1.RemoteNode, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("remotenode"), name)
	}
	return obj.(*v1alpha1.RemoteNode), nil
}
