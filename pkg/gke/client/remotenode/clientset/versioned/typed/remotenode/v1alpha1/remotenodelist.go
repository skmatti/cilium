/*
Copyright 2023 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"

	v1alpha1 "github.com/cilium/cilium/pkg/gke/apis/remotenode/v1alpha1"
	scheme "github.com/cilium/cilium/pkg/gke/client/remotenode/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	rest "k8s.io/client-go/rest"
)

// RemoteNodeListsGetter has a method to return a RemoteNodeListInterface.
// A group's client should implement this interface.
type RemoteNodeListsGetter interface {
	RemoteNodeLists(namespace string) RemoteNodeListInterface
}

// RemoteNodeListInterface has methods to work with RemoteNodeList resources.
type RemoteNodeListInterface interface {
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1alpha1.RemoteNodeList, error)
	RemoteNodeListExpansion
}

// remoteNodeLists implements RemoteNodeListInterface
type remoteNodeLists struct {
	client rest.Interface
	ns     string
}

// newRemoteNodeLists returns a RemoteNodeLists
func newRemoteNodeLists(c *NetworkingV1alpha1Client, namespace string) *remoteNodeLists {
	return &remoteNodeLists{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the remoteNodeList, and returns the corresponding remoteNodeList object, and an error if there is any.
func (c *remoteNodeLists) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.RemoteNodeList, err error) {
	result = &v1alpha1.RemoteNodeList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("remotenodelists").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}
