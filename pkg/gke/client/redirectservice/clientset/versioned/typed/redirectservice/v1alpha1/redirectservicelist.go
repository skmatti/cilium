/*
Copyright 2020 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"

	v1alpha1 "github.com/cilium/cilium/pkg/gke/apis/redirectservice/v1alpha1"
	scheme "github.com/cilium/cilium/pkg/gke/client/redirectservice/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	rest "k8s.io/client-go/rest"
)

// RedirectServiceListsGetter has a method to return a RedirectServiceListInterface.
// A group's client should implement this interface.
type RedirectServiceListsGetter interface {
	RedirectServiceLists(namespace string) RedirectServiceListInterface
}

// RedirectServiceListInterface has methods to work with RedirectServiceList resources.
type RedirectServiceListInterface interface {
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1alpha1.RedirectServiceList, error)
	RedirectServiceListExpansion
}

// redirectServiceLists implements RedirectServiceListInterface
type redirectServiceLists struct {
	client rest.Interface
	ns     string
}

// newRedirectServiceLists returns a RedirectServiceLists
func newRedirectServiceLists(c *NetworkingV1alpha1Client, namespace string) *redirectServiceLists {
	return &redirectServiceLists{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the redirectServiceList, and returns the corresponding redirectServiceList object, and an error if there is any.
func (c *redirectServiceLists) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.RedirectServiceList, err error) {
	result = &v1alpha1.RedirectServiceList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("redirectservicelists").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}
