/*
Copyright 2020 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/cilium/cilium/pkg/gke/apis/redirectservice/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RedirectServiceLister helps list RedirectServices.
// All objects returned here must be treated as read-only.
type RedirectServiceLister interface {
	// List lists all RedirectServices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RedirectService, err error)
	// RedirectServices returns an object that can list and get RedirectServices.
	RedirectServices(namespace string) RedirectServiceNamespaceLister
	RedirectServiceListerExpansion
}

// redirectServiceLister implements the RedirectServiceLister interface.
type redirectServiceLister struct {
	indexer cache.Indexer
}

// NewRedirectServiceLister returns a new RedirectServiceLister.
func NewRedirectServiceLister(indexer cache.Indexer) RedirectServiceLister {
	return &redirectServiceLister{indexer: indexer}
}

// List lists all RedirectServices in the indexer.
func (s *redirectServiceLister) List(selector labels.Selector) (ret []*v1alpha1.RedirectService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RedirectService))
	})
	return ret, err
}

// RedirectServices returns an object that can list and get RedirectServices.
func (s *redirectServiceLister) RedirectServices(namespace string) RedirectServiceNamespaceLister {
	return redirectServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RedirectServiceNamespaceLister helps list and get RedirectServices.
// All objects returned here must be treated as read-only.
type RedirectServiceNamespaceLister interface {
	// List lists all RedirectServices in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RedirectService, err error)
	// Get retrieves the RedirectService from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RedirectService, error)
	RedirectServiceNamespaceListerExpansion
}

// redirectServiceNamespaceLister implements the RedirectServiceNamespaceLister
// interface.
type redirectServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RedirectServices in the indexer for a given namespace.
func (s redirectServiceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RedirectService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RedirectService))
	})
	return ret, err
}

// Get retrieves the RedirectService from the indexer for a given namespace and name.
func (s redirectServiceNamespaceLister) Get(name string) (*v1alpha1.RedirectService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("redirectservice"), name)
	}
	return obj.(*v1alpha1.RedirectService), nil
}
