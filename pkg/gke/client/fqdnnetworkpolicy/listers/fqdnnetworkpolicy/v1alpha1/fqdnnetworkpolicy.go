/*
Copyright 2022 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/cilium/cilium/pkg/gke/apis/fqdnnetworkpolicy/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FQDNNetworkPolicyLister helps list FQDNNetworkPolicies.
// All objects returned here must be treated as read-only.
type FQDNNetworkPolicyLister interface {
	// List lists all FQDNNetworkPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FQDNNetworkPolicy, err error)
	// FQDNNetworkPolicies returns an object that can list and get FQDNNetworkPolicies.
	FQDNNetworkPolicies(namespace string) FQDNNetworkPolicyNamespaceLister
	FQDNNetworkPolicyListerExpansion
}

// fQDNNetworkPolicyLister implements the FQDNNetworkPolicyLister interface.
type fQDNNetworkPolicyLister struct {
	indexer cache.Indexer
}

// NewFQDNNetworkPolicyLister returns a new FQDNNetworkPolicyLister.
func NewFQDNNetworkPolicyLister(indexer cache.Indexer) FQDNNetworkPolicyLister {
	return &fQDNNetworkPolicyLister{indexer: indexer}
}

// List lists all FQDNNetworkPolicies in the indexer.
func (s *fQDNNetworkPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.FQDNNetworkPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FQDNNetworkPolicy))
	})
	return ret, err
}

// FQDNNetworkPolicies returns an object that can list and get FQDNNetworkPolicies.
func (s *fQDNNetworkPolicyLister) FQDNNetworkPolicies(namespace string) FQDNNetworkPolicyNamespaceLister {
	return fQDNNetworkPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FQDNNetworkPolicyNamespaceLister helps list and get FQDNNetworkPolicies.
// All objects returned here must be treated as read-only.
type FQDNNetworkPolicyNamespaceLister interface {
	// List lists all FQDNNetworkPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FQDNNetworkPolicy, err error)
	// Get retrieves the FQDNNetworkPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FQDNNetworkPolicy, error)
	FQDNNetworkPolicyNamespaceListerExpansion
}

// fQDNNetworkPolicyNamespaceLister implements the FQDNNetworkPolicyNamespaceLister
// interface.
type fQDNNetworkPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FQDNNetworkPolicies in the indexer for a given namespace.
func (s fQDNNetworkPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FQDNNetworkPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FQDNNetworkPolicy))
	})
	return ret, err
}

// Get retrieves the FQDNNetworkPolicy from the indexer for a given namespace and name.
func (s fQDNNetworkPolicyNamespaceLister) Get(name string) (*v1alpha1.FQDNNetworkPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("fqdnnetworkpolicy"), name)
	}
	return obj.(*v1alpha1.FQDNNetworkPolicy), nil
}
