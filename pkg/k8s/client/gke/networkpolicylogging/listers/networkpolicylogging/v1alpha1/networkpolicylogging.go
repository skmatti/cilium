/*
Copyright 2020 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/cilium/cilium/pkg/k8s/apis/gke/networkpolicylogging/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NetworkPolicyLoggingLister helps list NetworkPolicyLoggings.
type NetworkPolicyLoggingLister interface {
	// List lists all NetworkPolicyLoggings in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.NetworkPolicyLogging, err error)
	// NetworkPolicyLoggings returns an object that can list and get NetworkPolicyLoggings.
	NetworkPolicyLoggings(namespace string) NetworkPolicyLoggingNamespaceLister
	NetworkPolicyLoggingListerExpansion
}

// networkPolicyLoggingLister implements the NetworkPolicyLoggingLister interface.
type networkPolicyLoggingLister struct {
	indexer cache.Indexer
}

// NewNetworkPolicyLoggingLister returns a new NetworkPolicyLoggingLister.
func NewNetworkPolicyLoggingLister(indexer cache.Indexer) NetworkPolicyLoggingLister {
	return &networkPolicyLoggingLister{indexer: indexer}
}

// List lists all NetworkPolicyLoggings in the indexer.
func (s *networkPolicyLoggingLister) List(selector labels.Selector) (ret []*v1alpha1.NetworkPolicyLogging, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetworkPolicyLogging))
	})
	return ret, err
}

// NetworkPolicyLoggings returns an object that can list and get NetworkPolicyLoggings.
func (s *networkPolicyLoggingLister) NetworkPolicyLoggings(namespace string) NetworkPolicyLoggingNamespaceLister {
	return networkPolicyLoggingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NetworkPolicyLoggingNamespaceLister helps list and get NetworkPolicyLoggings.
type NetworkPolicyLoggingNamespaceLister interface {
	// List lists all NetworkPolicyLoggings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.NetworkPolicyLogging, err error)
	// Get retrieves the NetworkPolicyLogging from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.NetworkPolicyLogging, error)
	NetworkPolicyLoggingNamespaceListerExpansion
}

// networkPolicyLoggingNamespaceLister implements the NetworkPolicyLoggingNamespaceLister
// interface.
type networkPolicyLoggingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NetworkPolicyLoggings in the indexer for a given namespace.
func (s networkPolicyLoggingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NetworkPolicyLogging, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetworkPolicyLogging))
	})
	return ret, err
}

// Get retrieves the NetworkPolicyLogging from the indexer for a given namespace and name.
func (s networkPolicyLoggingNamespaceLister) Get(name string) (*v1alpha1.NetworkPolicyLogging, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("networkpolicylogging"), name)
	}
	return obj.(*v1alpha1.NetworkPolicyLogging), nil
}
