apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.1
  name: nodenetworkpolicies.networking.gke.io
spec:
  group: networking.gke.io
  names:
    kind: NodeNetworkPolicy
    listKind: NodeNetworkPolicyList
    plural: nodenetworkpolicies
    shortNames:
    - nnp
    singular: nodenetworkpolicy
  scope: Cluster
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: NodeNetworkPolicy describes what network traffic is allowed for a set of Nodes.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Spec contains the specification of NodeNetworkPolicy.
            properties:
              ingress:
                description: List of ingress rules to be applied to the selected nodes. Connection is allowed to a node if there are no NodeNetworkPolies selecting the node OR if the connection matches at least one ingress rule across all of the NodeNetworkPolicy objects whose nodeSelector matches the node. If this field is empty, then this NodeNetworkPolicy does not allow any traffic (and serves solely to ensure that the nodes it selects are isolated by default)
                items:
                  description: NodeNetworkPolicyIngressRule describes a particular set of connections that are allowed to the nodes matched by a NodeNetworkPolicySpec's nodeSelector. The connection must match both Ports and From if they are non-empty. An empty rule means allowing all ingress connections. The firewall is stateful, so the reply traffic to an egress connection that is initiated by the node are automatically allowed.
                  properties:
                    from:
                      description: List of sources that are allowed to access the nodes selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule allows all sources. If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the from list.
                      items:
                        description: NodeNetworkPolicyPeer describes a peer to allow traffic from.
                        properties:
                          ipBlock:
                            description: IPBlock defines a particular IP block that a peer can belong to.
                            properties:
                              cidr:
                                description: CIDR is a string representing the IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64"
                                pattern: ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(/(3[0-2]|2[0-9]|1[0-9]|[0-9]))?$
                                type: string
                              except:
                                description: Except is a slice of CIDRs that should not be included within an IP Block. Valid examples are "192.168.1.1/24" or "2001:db9::/64". Values will be rejected if they are outside the CIDR range.
                                items:
                                  type: string
                                  pattern: ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(/(3[0-2]|2[0-9]|1[0-9]|[0-9]))?$
                                type: array
                            required:
                            - cidr
                            type: object
                        type: object
                      type: array
                    ports:
                      description: List of ports which should be made accessible on the nodes selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports and protocols (traffic not restricted by port and protocol). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
                      items:
                        description: NodeNetworkPolicyPort describes a port to allow traffic on.
                        properties:
                          port:
                            description: Port describes a port on the given protocol for a node. If this field is not provided, this matches all port numbers.
                            format: int32
                            maximum: 65535
                            minimum: 0
                            type: integer
                          protocol:
                            default: TCP
                            description: The protocol (TCP or UDP) which traffic must match. If not specified, this field defaults to TCP.
                            enum:
                            - TCP
                            - UDP
                            type: string
                        type: object
                      type: array
                  type: object
                type: array
              logging:
                description: Logging specifies the logging options for connection matching this policy.
                properties:
                  enable:
                    description: If true, connections that match this node network policy will be logged.
                    type: boolean
                required:
                - enable
                type: object
              nodeSelector:
                description: Selects the nodes to which this NodeNetworkPolicy object applies. The array of ingress rules are applied to any nodes selected by this field. Multiple network policies can select the same set of nodes. In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty nodeselector matches all nodes in this cluster.
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                    type: object
                type: object
            required:
            - nodeSelector
            type: object
        type: object
    served: true
    storage: true
