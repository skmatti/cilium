#!/bin/bash

set -euxo pipefail
shopt -s inherit_errexit

echo
echo "==============================================================================="
echo "Starting WORA test execution"

function log_finish() {
  if [[ -n "${WORA_ARTIFACTS:-}" ]] && [[ -n "${TEST_RUN_ID:-}" ]]; then
    rm -f "${WORA_ARTIFACTS}/${TEST_RUN_ID}/junit_runner.xml"
  fi
  set +o xtrace
  echo "==============================================================================="
  echo "End of WORA test execution"
  echo
}
trap log_finish exit

set -x

# Derive semi-unique id for rookery containing test application.
TEST_RUN_ID=${KUBETEST2_RUN_ID:-unset-id}-${BASHPID:?}

function verify_cilium_overridden {
  # assumes that KUBECONFIG is appropriately set to the SUT cluster
  local expected_cilium_image_with_tag="${1:?}"
  local pod_name
  local found_cilium_image

  if [[ -n "${TAILORBIRD_RESOURCE_ENV_FILES}" ]]; then
    # source Tailorbird resource env file to set up any proxy information.
    # this file is generated by tailorbird.
    # shellcheck disable=SC1090
    source "${TAILORBIRD_RESOURCE_ENV_FILES}"
  fi

  # find all anetd pods
  mapfile -t anet_pod_names < <(kubectl get pods -n kube-system | grep -oP 'anetd-\w+')
  if [[ -z "${anet_pod_names[*]}" ]]; then
    echo "No anetd pods found" >&2
    return 1
  fi

  for pod_name in "${anet_pod_names[@]}"; do
    found_cilium_image=$(kubectl get pods "${pod_name}" -n kube-system -o yaml | yq '.spec.containers[0].image')
    if [[ "${found_cilium_image}" != "${expected_cilium_image_with_tag}" ]]; then
      echo "Cilium did not upgrade to expected version. Expected ${expected_cilium_image_with_tag}. Found ${found_cilium_image}" >&2
      return 1
    else
      echo "Cilium is successfully verified"
    fi
  done
}

# Revert KUBECONFIG change made by kt2-tb, to avoid control plane login to mess
# up SUT cluster's kubeconfig.
if [[ -n "${OLD_KUBECONFIG}" ]] && [[ -n "${ARTIFACTS}" ]] && [[ "${KUBECONFIG#"${ARTIFACTS}"}" != "${KUBECONFIG}" ]]; then
  export KUBECONFIG="${OLD_KUBECONFIG-}"
fi

if [[ -n "${KUBECONFIG}" ]] && [[ -n "${CILIUM_IMAGE_WITH_TAG:-}" ]]; then
  verify_cilium_overridden "${CILIUM_IMAGE_WITH_TAG}"
fi

# This is used to set the cluster artifacts env var.
CLUSTER_ARTIFACTS_SUBDIR="$(yq '".tailorbird/artifacts/knests/" + (.spec.knests[0].spec.clusters[0].metadata.name // "null") + "/clusters/" + (.spec.knests[0].spec.clusters[0].metadata.name // "null")' "${TBCONFIG:?}")"

# Resolve symlink to work around OOB artifact packaging bug. Symlink value
# should point to a cluster's artifact folder against which test will run.
CLUSTER_ARTIFACTS=$(realpath "${ARTIFACTS}/${CLUSTER_ARTIFACTS_SUBDIR}")

# Folder for nested WORA runs, to make file layout more clear.
WORA_ARTIFACTS="${ARTIFACTS}/wora"

# Upload-external-clusters name should match namePrefix in WORA yaml. Because
# test is going to have its own junit.xml, suppress kt2 junit generation.
# Status-check-interval is increased to work around incorrect calculation of
# rookery status.
ARTIFACTS="${WORA_ARTIFACTS}" \
  kubetest2-tailorbird \
  --verbose \
  --run-id "${TEST_RUN_ID}" \
  --tbenv="${TBENV:?}" \
  --tbconfig "${WORA_CONFIG:?}" \
  --upload-external-clusters "oob=${CLUSTER_ARTIFACTS}" \
  --status-check-interval=90 \
  --up \
  --down

function check_junit_files_for_errors() {
  local junit_files
  local junit_file
  local test_suites
  local test_suite
  local errors
  local failures
  mapfile -t junit_files < <(find "${WORA_ARTIFACTS}" -name junit_\*.xml)
  for junit_file in "${junit_files[@]}"; do
    echo "Checking ${junit_file} for failures"
    readarray -t test_suites < <(grep -E '(<testsuite).*>' "${junit_file}" || true)
    for test_suite in "${test_suites[@]}"; do
      errors="$(echo "$test_suite" | sed -n 's/.*errors="\([0-9]*\)".*/\1/p')"
      failures="$(echo "$test_suite" | sed -n 's/.*failures="\([0-9]*\)".*/\1/p')"
      if ((${errors:-0} != 0)) || ((${failures:-0} != 0)); then
        echo "Failures found in produced ${junit_file} output. Failing workflow" >&2
        return 1
      fi
    done
  done
}

check_junit_files_for_errors
